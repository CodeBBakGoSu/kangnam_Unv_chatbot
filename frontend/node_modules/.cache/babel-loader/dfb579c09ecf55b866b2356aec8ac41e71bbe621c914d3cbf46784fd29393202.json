{"ast":null,"code":"import axios from 'axios';\n\n// Axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터 설정\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('API 요청 오류:', error);\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터 설정\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // 401 오류 처리 (인증 만료)\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// API 서비스 함수들\nexport const authService = {\n  login: async (username, password) => {\n    const response = await api.post('/api/auth/login', {\n      username,\n      password\n    });\n    // 백엔드 응답(access_token)을 프론트엔드 형식(token)으로 변환\n    return {\n      token: response.data.access_token,\n      token_type: response.data.token_type\n    };\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n};\nexport const chatService = {\n  sendMessage: async message => {\n    const response = await api.post('/api/chat', {\n      message\n    });\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","error","console","Promise","reject","response","status","removeItem","window","location","href","authService","login","username","password","post","data","access_token","token_type","logout","chatService","sendMessage","message"],"sources":["/Users/hong-gihyeon/Desktop/cap/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\n// 요청 인터셉터 설정\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    console.error('API 요청 오류:', error);\n    return Promise.reject(error);\n  }\n);\n\n// 응답 인터셉터 설정\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // 401 오류 처리 (인증 만료)\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// API 서비스 함수들\nexport const authService = {\n  login: async (username, password) => {\n    const response = await api.post('/api/auth/login', { username, password });\n    // 백엔드 응답(access_token)을 프론트엔드 형식(token)으로 변환\n    return {\n      token: response.data.access_token,\n      token_type: response.data.token_type\n    };\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    window.location.href = '/login';\n  }\n};\n\nexport const chatService = {\n  sendMessage: async (message) => {\n    const response = await api.post('/api/chat', { message });\n    return response.data;\n  }\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACjEC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACTC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACQ,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAJ,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACI,QAAQ,IAAIJ,KAAK,CAACI,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnDP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOP,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMU,WAAW,GAAG;EACzBC,KAAK,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACnC,MAAMT,QAAQ,GAAG,MAAMnB,GAAG,CAAC6B,IAAI,CAAC,iBAAiB,EAAE;MAAEF,QAAQ;MAAEC;IAAS,CAAC,CAAC;IAC1E;IACA,OAAO;MACLhB,KAAK,EAAEO,QAAQ,CAACW,IAAI,CAACC,YAAY;MACjCC,UAAU,EAAEb,QAAQ,CAACW,IAAI,CAACE;IAC5B,CAAC;EACH,CAAC;EACDC,MAAM,EAAEA,CAAA,KAAM;IACZpB,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;AACF,CAAC;AAED,OAAO,MAAMU,WAAW,GAAG;EACzBC,WAAW,EAAE,MAAOC,OAAO,IAAK;IAC9B,MAAMjB,QAAQ,GAAG,MAAMnB,GAAG,CAAC6B,IAAI,CAAC,WAAW,EAAE;MAAEO;IAAQ,CAAC,CAAC;IACzD,OAAOjB,QAAQ,CAACW,IAAI;EACtB;AACF,CAAC;AAED,eAAe9B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}